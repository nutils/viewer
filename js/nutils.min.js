function NutilsViewer() {
  this.results = {'*':0};
  this.curres = '*';
  this.curpos = 0;
  this.url = '';
  this.reimg = /\.(png|jpe?g|gif)$/;

  /**
   * NutilsViewer.__init__()
   * Initiate the viewer
   *
   * @return void
   */
  this.__init__ = function (){
    var self = this;
    // Enable the buttons
    $('#nutils-nav-first').click(function (){ return self.firstResult(); });
    $('#nutils-nav-prev').click(function (){ return self.prevResult(); });
    $('#nutils-nav-next').click(function (){ return self.nextResult(); });
    $('#nutils-nav-last').click(function (){ return self.lastResult(); });


    // Enable shortcuts
  }

  /**
   * NutilsViewer.firstResult()
   * Go to the first result
   *
   * @return bool
   */
  this.firstResult = function (){
    if( this.curpos > 0 ) {
      this.curpos = 0;
    }
    this.showResult( this.curres, this.curpos );
    return false;
  }

  /**
   * NutilsViewer.prevResult()
   * Go to the previous result
   *
   * @return bool
   */
  this.prevResult = function (){
    if( this.curpos > 0 ) {
      this.curpos--;
    }
    this.showResult( this.curres, this.curpos );
    return false;
  }

  /**
   * NutilsViewer.nextResult()
   * Go to the next result
   *
   * @return bool
   */
  this.nextResult = function (){
    var numres = this.results[this.curres];
    if( this.curpos < numres-1) {
      this.curpos++;
    }
    this.showResult( this.curres, this.curpos );
    return false;
  }

  /**
   * NutilsViewer.lastResult()
   * Go to the last result
   *
   * @return bool
   */
  this.lastResult = function (){
    var numres = this.results[this.curres];
    if( this.curpos < numres-1) {
      this.curpos = numres - 1;
    }
    this.showResult( this.curres, this.curpos );
    return false;
  }

  /**
   * NutilsViewer.showResult( res, pos )
   * Show a specific result
   *
   * @param string res
   * @param int pos
   * @return bool
   */
  this.showResult = function ( res, pos ){
    var numres = this.results[res];
    if( pos < 0 || pos >= numres )
      return false;

    // Focus on the link
    if( res == '*' )
      var $link = $('a.nutils-' + pos).focus();
    else
      var $link = $('a.nutils-' + res + '-' + pos).focus();

    // Update location
    window.location.hash = $link.attr('name');
  }


  /**
   * NutilsViewer.resetCounters()
   * Reset all counters and positions
   *
   * @return void
   */
  this.resetCounters = function () {
    this.results = {'*':0};
    this.curres = '*';
    this.curpos = 0;
  }

  /**
   * NutilsViewer.getUrl()
   * Get the url from the ?url= parameter
   *
   * @return string url
   */
  this.getUrlParams = function () {
    var params = {};
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for( var i = 0; i < vars.length; i++ ) {
      var pair = vars[i].split("=");
      // If first entry with this name
      if( typeof params[pair[0]] === "undefined" ) {
        params[pair[0]] = pair[1];
      // If second entry with this name
      } else if( typeof params[pair[0]] === "string" ) {
        var arr = [ params[pair[0]], pair[1] ];
        params[pair[0]] = arr;
      // If third or later entry with this name
      } else {
        params[pair[0]].push(pair[1]);
      }
    }
    return params;
  }

  /**
   * NutilsViewer.loadLogFile( url )
   * Load the log from an url using AJAX
   * Note that the domain needs to
   *      correspond to the viewer's domain
   *
   * @param string url
   * @return void
   */
  this.loadLogFile = function ( url ) {
    // Link to instance
    // since this is overwritten
    var self = this;

    // Adjust breadcrumb
    this.buildBreadcrumb( url );

    // Store the url
    this.url = url.replace(/[^\/]+$/, '');

    // Load the url using GET
    jQuery.get(url, {})
          .done(function ( html ) {
            // Before loading
            self.beforeLoading();

            // Cleanup everything not between the <pre> tags
            var beforepre = /^([\s\S]*?<\s*pre[^>]*>)/gi
            var afterpre = /<\s*\/\s*pre\s*>[\s\S]*?$/gi
            var body = html.replace(beforepre, '')
                           .replace(afterpre, '');

            // Insert the HTML in the viewer
            var $pre = $('#content pre').html(body)

            // Remove the navbar and parse each link
            $pre.find('#navbar').remove();
            $pre.find('a')
                .each(function (){
                  self.parseLink( this );
                });

            // Count errors in the file
            var errors = $pre.find('.error').length
            if( errors > 0 )
              alert('Found ' + errors + ' error(s)');

            // After loading
            self.afterLoading();
          });
  }

  /**
   * NutilsViewer.beforeLoading()
   * Executes before a new log file is loaded
   *
   * @return void
   */
  this.beforeLoading = function(){
    // Reset the results
    this.resetCounters();
  }

  /**
   * NutilsViewer.afterLoading()
   * Executes after a new log file is loaded
   *
   * @return void
   */
  this.afterLoading = function(){
    // Activate the lazyload on the images
    $("img.lazy").lazyload({
      event: "scrollstop"
    });
  }

  /**
   * NutilsViewer.parseLink( a )
   * Parse the link so the viewer show it
   *
   * @param DOM a
   * @return void
   */
  this.parseLink = function( a ){
    var $a = $(a)
    var lnk = $a.attr('href');

    // Fix path link
    var src = this.url + $a.attr('href');
    $a.attr('href', src);

    // Skip all links without a name
    if( ! $a.attr('name') )
      return true;

    var name = lnk.substr(0, lnk.lastIndexOf('.'));
        name = name.replace(/[^a-z\-_]+/i,'');

    // Create a counter for this result if it doesn't exist
    if( typeof this.results[name] === 'undefined' )
      this.results[name] = 0;
    else
      ++this.results[name];

    // Add classes with the ID's
    var clss = [];
    clss.push('nutils-' + this.results['*']);
    clss.push('nutils-' + name + '-' + this.results[name]);
    $a.addClass( clss.join(' ') );
    $a.attr( 'name', clss[1] );

    // If this is an image
    if( lnk.match(this.reimg) ) {
      var clss = 'nutils-img-' + name + '-' + this.results[name]
               + ' nutils-img-' + this.results['*'];
      $a.after('<div><img class="lazy nutils-img ' + clss + ' img-responsive" data-original="' + src + '" alt="" /></div>')
    }

    // Increment the total number of images
    this.results['*']++;
  }

  /**
   * NutilsViewer.buildBreadcrumb( url )
   * Build a breadcrumb menu out of the url
   *
   * @param string url
   * @return void
   */
  this.buildBreadcrumb = function( url ){
    var parts = url.split('/');
    while( parts.length && (parts[0] == 'res' || parts[0] == '') )
      parts = parts.slice(1);

    while( parts.length > 0 && parts[parts.length-1] == 'log.html' )
      parts = parts.slice(0,-1);

    $bread = $('.breadcrumb');
    $bread.html('<li><a href="/index/">Projects</a></li>');
    for( var i = 0; i < parts.length; i++ ) {
      var url = parts.slice(0, i+1).join('/');
      var name = parts[i];
      $bread.append('<li><a href="/index/' + url + '">' + name + '</a></li>');
    }
  }

  // Run init
  this.__init__();
}


