function NutilsViewer() {
  this.results = {'*':0};
  this.curres = '*';
  this.curpos = 0;
  this.url = '';
  this.reimg = /\.(png|jpe?g|gif)$/;

  /**
   * NutilsViewer.__init__()
   * Initiate the viewer
   *
   * @return void
   */
  this.__init__ = function (){
    var self = this;
    var params = this.getUrlParams();

    // Setup viewer with params
    if( typeof params.url != 'undefined' && params.url != '' )
      this.loadLogFile( params.url );
    if( typeof params.advanced != 'undefined' &&  params.advanced.toLowerCase() == 'true' )
      $('.nutils-advanced').removeClass('nutils-advanced');

    // Enable the buttons
    $('#nutils-nav-first').click(function (){ self.firstResult(); return false; });
    $('#nutils-nav-prev').click(function (){ self.prevResult(); return false; });
    $('#nutils-nav-next').click(function (){ self.nextResult(); return false; });
    $('#nutils-nav-last').click(function (){ self.lastResult(); return false; });


    // Enable shortcuts
    $('body', document).keydown(function (evt){
      // Don't respond when modifiers are pressed
      if( evt.ctrlKey || evt.metaKey || evt.altKey )
        return true;

      // Check for function keys
      switch( true ) {
        case evt.keyCode == 27: // Escape
          self._selGallery
            .find('option:selected').attr('selected', false)
            .end()
            .find('option[value="*"]').attr('selected', true)
            .end()
            .trigger('change');
            break;
        case evt.keyCode == 70:  // F(ull) image
          self._selView
            .find('option:selected').attr('selected', false)
            .end()
            .find('option[value=img]').attr('selected', true)
            .end()
            .trigger('change');
          break;
        case evt.keyCode == 71:  // G  image / term
          self._selView
            .find('option:selected').attr('selected', false)
            .end()
            .find('option[value=both]').attr('selected', true)
            .end()
            .trigger('change');
          break;
        case evt.keyCode == 72:  // H(ide) image
          self._selView
            .find('option:selected').attr('selected', false)
            .end()
            .find('option[value=term]').attr('selected', true)
            .end()
            .trigger('change');
          break;
        case (evt.keyCode == 75 && evt.shiftKey) || evt.keyCode == 38: // Shift+K (vim super up)
          self.firstResult();
          break
        case (evt.keyCode == 74 && evt.shiftKey) || evt.keyCode == 40: // Shift+J (vim super down)
          self.lastResult();
          break;
        case evt.keyCode == 75 || evt.keyCode == 37: // k (vim up)
          self.prevResult();
          break;
        case evt.keyCode == 74 || evt.keyCode == 39: // j (vim down)
          self.nextResult();
          break;
        /*case evt.shiftKey && evt.keyCode == 76: // Shift + L
          if( self._aLatestAll.length )
            document.location.href = self._aLatestAll.attr('href');
          else
            alert('Link to the latest simulation is not found, navigate manually to the last simulation');
          break;
        case evt.keyCode == 76: // l
          if( self._aLatest.length )
            document.location.href = self._aLatest.attr('href');
          else
            alert('Link to the simulation is not found, navigate manually to the simulation');
          break;
        case evt.keyCode == 82: // r
          if( self._data.length ) {
            var dat = self._galleries[self._current.gallery][self._current.index];
            var hash = '#' + self._data[dat].hash;
          } else {
            var hash = ''
          }
          var loc = document.location.href.substr(0, document.location.href.indexOf('#'));
          document.location.href = loc + hash;
          window.location.reload(true);
          break;*/
        case evt.keyCode == 73: // I
          document.location.href = '/index';
          break;
        /*case evt.keyCode == 86: // V
          var url = self._imglink.attr('href');
          if( evt.shiftKey )
            window.open(url, '_blank');
          else
            document.location.href = url;
          break;*/
        default:
          // Not a shortcut -> continue with the event
          return true;
          break;
      }

      // Shortcut was pressed
      evt.preventDefault();
      return false;
    });
  }

  /**
   * NutilsViewer.firstResult()
   * Go to the first result
   *
   * @return bool
   */
  this.firstResult = function (){
    this.showResult( this.curres, 0 );
    return false;
  }

  /**
   * NutilsViewer.prevResult()
   * Go to the previous result
   *
   * @return bool
   */
  this.prevResult = function (){
    var pos = Math.max( this.curpos-1, 0 )
    this.showResult( this.curres, pos );
    return false;
  }

  /**
   * NutilsViewer.nextResult()
   * Go to the next result
   *
   * @return bool
   */
  this.nextResult = function (){
    var numres = this.results[this.curres];
    var pos = Math.min( this.curpos+1, numres-1 )
    this.showResult( this.curres, pos );
    return false;
  }

  /**
   * NutilsViewer.lastResult()
   * Go to the last result
   *
   * @return bool
   */
  this.lastResult = function (){
    var numres = this.results[this.curres];
    var pos = numres-1;
    this.showResult( this.curres, pos );
    return false;
  }

  /**
   * NutilsViewer.showResult( res, pos )
   * Show a specific result
   *
   * @param string res
   * @param int pos
   * @return bool
   */
  this.showLink = function ( a ){
    var name = $(a).attr('name').replace('nutils-', '');
    var i = name.lastIndexOf('-');
    var res = name.substr(0, i);
    var pos = name.substr(i+1);
    this.showResult( res, pos );
    return false;
  }

  /**
   * NutilsViewer.showResult( res, pos )
   * Show a specific result
   *
   * @param string res
   * @param int pos
   * @return bool
   */
  this.showResult = function ( res, pos ){
    var numres = this.results[res];
    if( pos < 0 || pos >= numres )
      return false;

    // Set the position
    this.curres = res;
    this.curpos = pos;

    // Focus on the link
    if( res == '*' )
      var $link = $('a.nutils-' + pos).focus();
    else
      var $link = $('a.nutils-' + res + '-' + pos).focus();

    // Update location
    window.location.hash = $link.attr('name');
  }


  /**
   * NutilsViewer.resetCounters()
   * Reset all counters and positions
   *
   * @return void
   */
  this.resetCounters = function () {
    this.results = {'*':0};
    this.curres = '*';
    this.curpos = 0;
  }

  /**
   * NutilsViewer.getUrl()
   * Get the url from the ?url= parameter
   *
   * @return string url
   */
  this.getUrlParams = function () {
    var params = {};
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for( var i = 0; i < vars.length; i++ ) {
      var pair = vars[i].split("=");
      // If first entry with this name
      if( typeof params[pair[0]] === "undefined" ) {
        params[pair[0]] = pair[1];
      // If second entry with this name
      } else if( typeof params[pair[0]] === "string" ) {
        var arr = [ params[pair[0]], pair[1] ];
        params[pair[0]] = arr;
      // If third or later entry with this name
      } else {
        params[pair[0]].push(pair[1]);
      }
    }
    return params;
  }

  /**
   * NutilsViewer.refresh()
   * Reload the log from an url using AJAX
   * Note that the domain needs to
   *      correspond to the viewer's domain
   *
   * @return void
   */
  this.refresh = function () {
    return this.loadLogFile( this.url );
  }

  /**
   * NutilsViewer.loadLogFile( url )
   * Load the log from an url using AJAX
   * Note that the domain needs to
   *      correspond to the viewer's domain
   *
   * @param string url
   * @return void
   */
  this.loadLogFile = function ( url ) {
    // Link to instance
    // since this is overwritten
    var self = this;

    // If no url is supplied
    if( typeof url == 'undefined' ) {
      this.message('Noting to load, supply the URL of the log-file.', 'warning');
      return false;
    }

    // Adjust breadcrumb
    this.buildBreadcrumb( url );

    // Store the loaded url
    this.url = url;

    // Load external urls via a proxy
    if( this.isExternal( url ) )
      url = '/proxy/' + escape(unescape(url));

    // Before loading
    this.beforeLoading();

    // Load the url using GET
    jQuery.get(url, {})
          .done(function ( html ) {

            // Cleanup everything not between the <pre> tags
            var beforepre = /^([\s\S]*?<\s*pre[^>]*>)/gi
            var afterpre = /<\s*\/\s*pre\s*>[\s\S]*?$/gi
            var body = html.replace(beforepre, '')
                           .replace(afterpre, '');

            // Insert the HTML in the viewer
            var $pre = $('#content pre').html(body)

            // Remove the navbar and parse each link
            $pre.find('#navbar').remove();
            $pre.find('a')
                .each(function (){
                  self.parseLink( this );
                });

            // Count errors in the file
            var errors = $pre.find('.error').length
            if( errors > 0 )
              self.message('Found ' + errors + ' error(s)', 'error');

            // After loading
            self.afterLoading();
          }).fail(function (){
            self.message('There was a problem loading ' + self.url + ', the results can not be displayed.', 'error');
          });
  };

  /**
   * NutilsViewer.message( msg, [ type ] )
   * Show a message in the viewer
   *
   * @param string msg
   * @param string type
   * @return void
   */
  this.message = function( msg, msgtype ) {
    // If type is not defined
    var type = (typeof msgtype != 'undefined')
             ? msgtype : 'info';


    // Determine the id of the targetted message box
    switch( type.toLowerCase() ) {
      case 'warning':
      case 'error':
        var jqid = '#nutils-' + type;
        break;
      default:
        var jqid = '#nutils-info';
        break;
    };

    // Insert message and show the box
    $(jqid)
      .find('.message-body')
      .html(msg)
      .end()
      .show('fast');
  };

  /**
   * NutilsViewer.isExternal( url )
   * Check if this is an external log file
   *
   * @param string url
   * @return bool
   */
  this.isExternal = function( url ) {
    url = url.toLowerCase().trim();

    switch( true ) {
      case url.substr(0,7) == 'http://':
      case url.substr(0,8) == 'https://':
      case url.substr(0,6) == 'ftp://':
        return true;
        break;
      default:
        return false;
        break;
    }
  }

  /**
   * NutilsViewer.beforeLoading()
   * Executes before a new log file is loaded
   *
   * @return void
   */
  this.beforeLoading = function(){
    // Reset the results
    this.resetCounters();

    // Show loading icon
    $('#content pre')
      .html('')
      .addClass('loading');
  }

  /**
   * NutilsViewer.afterLoading()
   * Executes after a new log file is loaded
   *
   * @return void
   */
  this.afterLoading = function(){
    // Activate the lazyload on the images
    $("img.lazy").lazyload({
      event: "scrollstop"
    });

    // Hide loading icon
    $('#content pre').removeClass('loading');
  }

  /**
   * NutilsViewer.parseLink( a )
   * Parse the link so the viewer show it
   *
   * @param DOM a
   * @return void
   */
  this.parseLink = function( a ){
    var self = this;

    var $a = $(a)
    var lnk = $a.attr('href');

    // Fix path link
    var url = this.url.substr(0, this.url.lastIndexOf('/')) + '/';
    var src = url + $a.attr('href');

    // Skip all links without a name
    if( ! $a.attr('name') )
      return true;

    var name = lnk.substr(0, lnk.lastIndexOf('.'));
        name = name.replace(/[^a-z\-_]+/i,'');

    // Create a counter for this result if it doesn't exist
    if( typeof this.results[name] === 'undefined' )
      this.results[name] = 0;
    else
      ++this.results[name];

    // Add classes with the ID's
    var clss = [];
    clss.push('nutils-' + this.results['*']);
    clss.push('nutils-' + name + '-' + this.results[name]);
    $a.addClass( clss.join(' ') );
    $a.attr( 'name', clss[1] )
      .click(function(){ self.showLink(this); })
      .attr( 'href', '#' + clss[1] );

    // If this is an image
    if( lnk.match(this.reimg) ) {
      var clss = 'nutils-img-' + name + '-' + this.results[name]
               + ' nutils-img-' + this.results['*'];
      $a.after('<div><a href="' + src + '"><img class="lazy nutils-img ' + clss + ' img-responsive" data-original="' + src + '" alt="" /></a></div>')
    }

    // Increment the total number of images
    this.results['*']++;
  }

  /**
   * NutilsViewer.buildBreadcrumb( url )
   * Build a breadcrumb menu out of the url
   *
   * @param string url
   * @return void
   */
  this.buildBreadcrumb = function( url ){
    $bread = $('.breadcrumb');

    // External resource
    if( this.isExternal( url ) ) {
      $bread.html( '<li>'
                 + '<a href="/index/">Projects</a>'
                 + '</li>'
                 + '<li>'
                 + '<a href="' + url + '">' + url + '</a>'
                 + '</li>');
      return true;
    }

    // Strip filename
    url = url.replace(/[^\/]+$/, '');

    // Split
    var parts = url.split('/');
    while( parts.length && (parts[0] == 'res' || parts[0] == '') )
      parts = parts.slice(1);

    while( parts.length > 0 && parts[parts.length-1].indexOf('log.htm') != -1 )
      parts.length -= 1;

    $bread.html('<li><a href="/index/">Projects</a></li>');
    for( var i = 0; i < parts.length; i++ ) {
      var url = parts.slice(0, i+1).join('/');
      var name = parts[i];
      $bread.append('<li><a href="/index/' + url + '">' + name + '</a></li>');
    }
  }

  // Run init
  this.__init__();
}


